
//"top-down development"
// https://developer.android.com/training/kotlinplayground

Create the main() function
Reset your code in the editor to the Hello, world! program.
You can remove the argument to main(), because you won't be using it.
In main(), create a variable age and set it to 24.
In main(), create a second variable layers and set it to 5.
In main(), call a function printCakeCandles() and pass in the age. This will leave you with an error, because you have not created that function yet.
Samewise, call a function printCakeTop() and also pass in the age.
Finally, call a function printCakeBottom() and pass in the age and also the number of layers.
To get rid of the errors, comment out the three function calls by adding // at the beginning of each line, as shown below. This technique allows you to draft your code without triggering errors.
Run your program, and it should have no errors and do nothing.

fun main() {
    val age = 24
    val layers = 5
    // printCakeCandles(age)
    // printCakeTop(age)
    // printCakeBottom(age, layers)
}

Create printCakeTop()

Below the main() function, add a blank line, and then create a function, printCakeTop() that takes one argument, age, of type Int.
Inside, use a repeat() statement to print one equal sign age times plus 2. The extra two equals signs are so that the candles won't fall off the side of the cake.
At the end, when the repeat() is done, print an empty line.
In main(), remove the two // symbols from the beginning of the line of code for printCakeTop(), because the function now exists.

fun printCakeTop(age: Int) {
    repeat(age + 2) {
        print("=")
    }
    println()
}



To accomplish this in one function, put two repeat() statements, one for the flames and one for the bodies, into your function.

Below the main() function and the printCakeTop() function, create a new function, printCakeCandles() that takes one argument, age, of type Int.
Inside, use a repeat() statement to print one comma , for the flame.
Repeat this age times.
At the end, print an empty line.
Add a print statement to print one space for insetting the candles.
Below, repeat the steps to create a second repeat() statement to print the candle bodies with a vertical line |.
At the end, print a new line, using println()
In main(), remove the two // symbols from the beginning of the line of code for printCakeCandles().



fun printCakeCandles(age: Int) {
    print(" ")
    repeat(age) {
        print(",")
    }    
    println() // Print an empty line   
 
    print(" ") // Print the inset of the candles on the cake
    repeat(age) {
        print("|")
    }    
    println()
}

 to create a layer
Below the existing functions, create a function printCakeBottom() with two arguments, age and layers, both of type Int.
Inside the function, use a repeat() statement to print one layer of ‘at' @ symbols age + 2 times. Finish by printing an empty line, as shown below.

fun printCakeBottom(age: Int, layers: Int) {
    repeat(age + 2) {
        print("@")
    }
    println()
}


Draw the at symbol age+2 times to create a layer
Below the existing functions, create a function printCakeBottom() with two arguments, age and layers, both of type Int.
Inside the function, use a repeat() statement to print one layer of ‘at' @ symbols age + 2 times. Finish by printing an empty line, as shown below.
Use a nested repeat() to print cake layers
Put a second repeat() statement around all of the code inside the function. Repeat this loop layers times.
In main(), remove only the two // from the line of code for printCakeBottom().

fun printCakeBottom(age: Int, layers: Int) {
    repeat(layers) {
        repeat(age + 2) {
            print("@")
        }
        println()
    }    
}

 ,,,,,,,,,,,,,,,,,,,,,,,,
 ||||||||||||||||||||||||
==========================
@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@


